{"version":3,"sources":["PanelType.tsx","LoadingSpinner.tsx","Panel.tsx","App.tsx","serviceWorker.js","index.js"],"names":["PanelType","LoadingSpinner","className","React","Component","Panel","props","validatePassword","state","password","length","checkPasswordsEquality","repassword","validateMail","mail","includes","onInputChange","e","target","name","value","setState","handleSignIn","preventDefault","isLoading","setTimeout","succeed","handleLogIn","login","this","type","Register","initActive","placeholder","onChange","id","onClick","App","active","Login","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f79c05e.chunk.js","sourcesContent":["export enum PanelType {\r\n  Register,\r\n  Login,\r\n}\r\n","import React from \"react\";\r\nimport \"./LoadingSpinner.css\";\r\n\r\nclass LoadingSpinner extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Tire\">\r\n        <div className=\"Spoke\">\r\n          <div className=\"Spoke45\">\r\n            <div className=\"Spoke45\">\r\n              <div className=\"Spoke45\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadingSpinner;\r\n","import React, { ChangeEvent } from \"react\";\r\nimport \"./Panel.css\";\r\nimport { PanelType } from \"./PanelType\";\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\n\r\nclass Panel extends React.Component<PanelProps, RegisterState> {\r\n  constructor(props: PanelProps) {\r\n    super(props);\r\n    this.state = {\r\n      login: \"\",\r\n      password: \"\",\r\n      mail: \"\",\r\n      repassword: \"\",\r\n      isLoading: false,\r\n      succeed: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return this.state.isLoading ? (\r\n      <div className=\"Panel\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    ) : this.state.succeed ? (\r\n      <div className=\"Panel\">\r\n        <div>\r\n          <h1>Gratulacje!</h1>\r\n          <p>\r\n            Udało się poprawnie{\" \"}\r\n            {this.props.type === PanelType.Register\r\n              ? \"zarejestrować\"\r\n              : \"zalogować\"}\r\n            .\r\n          </p>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div className={this.props.initActive ? \"Panel\" : \"Panel Inactive\"}>\r\n        <h1>{PanelType[this.props.type]}</h1>\r\n        <div className=\"PanelInput\">\r\n          <input\r\n            placeholder=\"login\"\r\n            type=\"text\"\r\n            name=\"login\"\r\n            onChange={this.onInputChange}\r\n          />\r\n          <input\r\n            className={\r\n              this.props.type === PanelType.Register &&\r\n              this.state.password.length > 0 &&\r\n              !this.validatePassword()\r\n                ? \"error\"\r\n                : \"\"\r\n            }\r\n            id=\"pass\"\r\n            placeholder=\"password\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            onChange={this.onInputChange}\r\n          />\r\n          {this.props.type === PanelType.Register && (\r\n            <input\r\n              className={\r\n                this.state.repassword.length > 0 &&\r\n                !this.checkPasswordsEquality()\r\n                  ? \"error\"\r\n                  : \"\"\r\n              }\r\n              id=\"repass\"\r\n              placeholder=\"confirm password\"\r\n              type=\"password\"\r\n              name=\"repassword\"\r\n              onChange={this.onInputChange}\r\n            />\r\n          )}\r\n          {this.props.type === PanelType.Register && (\r\n            <input\r\n              className={\r\n                this.state.mail.length > 0 && !this.validateMail()\r\n                  ? \"error\"\r\n                  : \"\"\r\n              }\r\n              placeholder=\"example@mail.com\"\r\n              type=\"email\"\r\n              name=\"mail\"\r\n              onChange={this.onInputChange}\r\n            />\r\n          )}\r\n        </div>\r\n        {this.props.type === PanelType.Register ? (\r\n          <button onClick={this.handleSignIn}>Sign in</button>\r\n        ) : (\r\n          <button onClick={this.handleLogIn}>Log in</button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  validatePassword = (): boolean => {\r\n    return this.state.password.length > 7;\r\n  };\r\n\r\n  checkPasswordsEquality = (): boolean => {\r\n    return this.state.password === this.state.repassword;\r\n  };\r\n\r\n  validateMail = (): boolean => {\r\n    return this.state.mail.includes(\"@\");\r\n  };\r\n\r\n  onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value } as any);\r\n  };\r\n\r\n  handleSignIn = (e: any) => {\r\n    e.preventDefault();\r\n    if (\r\n      this.validateMail() &&\r\n      this.checkPasswordsEquality() &&\r\n      this.validatePassword()\r\n    ) {\r\n      this.setState({ isLoading: true });\r\n      setTimeout(\r\n        () => this.setState({ succeed: true, isLoading: false }),\r\n        3000\r\n      );\r\n    }\r\n  };\r\n\r\n  handleLogIn = (e: any) => {\r\n    e.preventDefault();\r\n    this.setState({ isLoading: true });\r\n    setTimeout(() => this.setState({ succeed: true, isLoading: false }), 3000);\r\n  };\r\n}\r\n\r\ntype PanelProps = {\r\n  initActive: boolean;\r\n  type: PanelType;\r\n};\r\n\r\ntype RegisterState = {\r\n  login: string;\r\n  password: string;\r\n  mail: string;\r\n  repassword: string;\r\n  isLoading: boolean;\r\n  succeed: boolean;\r\n};\r\n\r\nexport default Panel;\r\n","import React from \"react\";\nimport Panel from \"./Panel\";\nimport { PanelType } from \"./PanelType\";\nimport \"./App.css\";\n\nclass App extends React.Component<undefined, AppState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      active: PanelType.Login,\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Background\"></div>\n        <div\n          onClick={() => {\n            this.setState({ active: PanelType.Register });\n          }}\n        >\n          <Panel\n            type={PanelType.Register}\n            initActive={this.state.active === PanelType.Register}\n          />\n        </div>\n        <div\n          onClick={() => {\n            this.setState({ active: PanelType.Login });\n          }}\n        >\n          <Panel\n            type={PanelType.Login}\n            initActive={this.state.active === PanelType.Login}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\ntype AppState = {\n  active: PanelType;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}